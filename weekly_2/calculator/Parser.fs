// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsp"

open FSharp.Text.Parsing

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | TO
  | OF
  | PLUS
  | MINUS
  | DIV
  | TIMES
  | LET
  | IN
  | SUM
  | PROD
  | EOF
  | LPAR
  | RPAR
  | EQ
  | VAR of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_TO
    | TOKEN_OF
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_DIV
    | TOKEN_TIMES
    | TOKEN_LET
    | TOKEN_IN
    | TOKEN_SUM
    | TOKEN_PROD
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_EQ
    | TOKEN_VAR
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startProg
    | NONTERM_Prog
    | NONTERM_Exp

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | TO  -> 0 
  | OF  -> 1 
  | PLUS  -> 2 
  | MINUS  -> 3 
  | DIV  -> 4 
  | TIMES  -> 5 
  | LET  -> 6 
  | IN  -> 7 
  | SUM  -> 8 
  | PROD  -> 9 
  | EOF  -> 10 
  | LPAR  -> 11 
  | RPAR  -> 12 
  | EQ  -> 13 
  | VAR _ -> 14 
  | INT _ -> 15 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_TO 
  | 1 -> TOKEN_OF 
  | 2 -> TOKEN_PLUS 
  | 3 -> TOKEN_MINUS 
  | 4 -> TOKEN_DIV 
  | 5 -> TOKEN_TIMES 
  | 6 -> TOKEN_LET 
  | 7 -> TOKEN_IN 
  | 8 -> TOKEN_SUM 
  | 9 -> TOKEN_PROD 
  | 10 -> TOKEN_EOF 
  | 11 -> TOKEN_LPAR 
  | 12 -> TOKEN_RPAR 
  | 13 -> TOKEN_EQ 
  | 14 -> TOKEN_VAR 
  | 15 -> TOKEN_INT 
  | 18 -> TOKEN_end_of_input
  | 16 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startProg 
    | 1 -> NONTERM_Prog 
    | 2 -> NONTERM_Exp 
    | 3 -> NONTERM_Exp 
    | 4 -> NONTERM_Exp 
    | 5 -> NONTERM_Exp 
    | 6 -> NONTERM_Exp 
    | 7 -> NONTERM_Exp 
    | 8 -> NONTERM_Exp 
    | 9 -> NONTERM_Exp 
    | 10 -> NONTERM_Exp 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 18 
let _fsyacc_tagOfErrorTerminal = 16

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | TO  -> "TO" 
  | OF  -> "OF" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | DIV  -> "DIV" 
  | TIMES  -> "TIMES" 
  | LET  -> "LET" 
  | IN  -> "IN" 
  | SUM  -> "SUM" 
  | PROD  -> "PROD" 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | EQ  -> "EQ" 
  | VAR _ -> "VAR" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | TO  -> (null : System.Object) 
  | OF  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | SUM  -> (null : System.Object) 
  | PROD  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 13us; 65535us; 0us; 2us; 6us; 7us; 20us; 9us; 21us; 10us; 22us; 11us; 25us; 12us; 26us; 13us; 27us; 14us; 30us; 15us; 31us; 16us; 34us; 17us; 35us; 18us; 36us; 19us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 4us; 1us; 5us; 6us; 7us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 4us; 4us; 5us; 6us; 7us; 1us; 4us; 4us; 5us; 5us; 6us; 7us; 4us; 5us; 6us; 6us; 7us; 4us; 5us; 6us; 7us; 7us; 4us; 5us; 6us; 7us; 8us; 4us; 5us; 6us; 7us; 8us; 4us; 5us; 6us; 7us; 8us; 4us; 5us; 6us; 7us; 9us; 4us; 5us; 6us; 7us; 9us; 4us; 5us; 6us; 7us; 10us; 4us; 5us; 6us; 7us; 10us; 4us; 5us; 6us; 7us; 10us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 9us; 11us; 13us; 15us; 17us; 22us; 24us; 29us; 34us; 39us; 44us; 49us; 54us; 59us; 64us; 69us; 74us; 79us; 81us; 83us; 85us; 87us; 89us; 91us; 93us; 95us; 97us; 99us; 101us; 103us; 105us; 107us; 109us; 111us; |]
let _fsyacc_action_rows = 37
let _fsyacc_actionTableElements = [|6us; 32768us; 6us; 28us; 8us; 23us; 9us; 32us; 11us; 6us; 14us; 5us; 15us; 4us; 0us; 49152us; 4us; 32768us; 2us; 20us; 3us; 21us; 5us; 22us; 10us; 3us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 6us; 32768us; 6us; 28us; 8us; 23us; 9us; 32us; 11us; 6us; 14us; 5us; 15us; 4us; 4us; 32768us; 2us; 20us; 3us; 21us; 5us; 22us; 12us; 8us; 0us; 16388us; 1us; 16389us; 5us; 22us; 1us; 16390us; 5us; 22us; 0us; 16391us; 4us; 32768us; 0us; 26us; 2us; 20us; 3us; 21us; 5us; 22us; 4us; 32768us; 1us; 27us; 2us; 20us; 3us; 21us; 5us; 22us; 3us; 16392us; 2us; 20us; 3us; 21us; 5us; 22us; 4us; 32768us; 2us; 20us; 3us; 21us; 5us; 22us; 7us; 31us; 3us; 16393us; 2us; 20us; 3us; 21us; 5us; 22us; 4us; 32768us; 0us; 35us; 2us; 20us; 3us; 21us; 5us; 22us; 4us; 32768us; 1us; 36us; 2us; 20us; 3us; 21us; 5us; 22us; 3us; 16394us; 2us; 20us; 3us; 21us; 5us; 22us; 6us; 32768us; 6us; 28us; 8us; 23us; 9us; 32us; 11us; 6us; 14us; 5us; 15us; 4us; 6us; 32768us; 6us; 28us; 8us; 23us; 9us; 32us; 11us; 6us; 14us; 5us; 15us; 4us; 6us; 32768us; 6us; 28us; 8us; 23us; 9us; 32us; 11us; 6us; 14us; 5us; 15us; 4us; 1us; 32768us; 14us; 24us; 1us; 32768us; 13us; 25us; 6us; 32768us; 6us; 28us; 8us; 23us; 9us; 32us; 11us; 6us; 14us; 5us; 15us; 4us; 6us; 32768us; 6us; 28us; 8us; 23us; 9us; 32us; 11us; 6us; 14us; 5us; 15us; 4us; 6us; 32768us; 6us; 28us; 8us; 23us; 9us; 32us; 11us; 6us; 14us; 5us; 15us; 4us; 1us; 32768us; 14us; 29us; 1us; 32768us; 13us; 30us; 6us; 32768us; 6us; 28us; 8us; 23us; 9us; 32us; 11us; 6us; 14us; 5us; 15us; 4us; 6us; 32768us; 6us; 28us; 8us; 23us; 9us; 32us; 11us; 6us; 14us; 5us; 15us; 4us; 1us; 32768us; 14us; 33us; 1us; 32768us; 13us; 34us; 6us; 32768us; 6us; 28us; 8us; 23us; 9us; 32us; 11us; 6us; 14us; 5us; 15us; 4us; 6us; 32768us; 6us; 28us; 8us; 23us; 9us; 32us; 11us; 6us; 14us; 5us; 15us; 4us; 6us; 32768us; 6us; 28us; 8us; 23us; 9us; 32us; 11us; 6us; 14us; 5us; 15us; 4us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 7us; 8us; 13us; 14us; 15us; 16us; 23us; 28us; 29us; 31us; 33us; 34us; 39us; 44us; 48us; 53us; 57us; 62us; 67us; 71us; 78us; 85us; 92us; 94us; 96us; 103us; 110us; 117us; 119us; 121us; 128us; 135us; 137us; 139us; 146us; 153us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 3us; 3us; 3us; 3us; 8us; 6us; 8us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16387us; 65535us; 65535us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 167 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.EXP in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startProg));
# 176 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.EXP in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsp"
                                      _1 
                   )
# 31 "Parser.fsp"
                 : AbSyn.EXP));
# 187 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsp"
                                            AbSyn.CONSTANT (AbSyn.INT _1) 
                   )
# 34 "Parser.fsp"
                 : AbSyn.EXP));
# 198 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsp"
                                            AbSyn.VARIABLE _1 
                   )
# 35 "Parser.fsp"
                 : AbSyn.EXP));
# 209 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AbSyn.EXP in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsp"
                                            _2 
                   )
# 36 "Parser.fsp"
                 : AbSyn.EXP));
# 220 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.EXP in
            let _3 = parseState.GetInput(3) :?> AbSyn.EXP in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsp"
                                          AbSyn.OPERATE( AbSyn.BPLUS, _1, _3 )
                   )
# 37 "Parser.fsp"
                 : AbSyn.EXP));
# 232 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.EXP in
            let _3 = parseState.GetInput(3) :?> AbSyn.EXP in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsp"
                                          AbSyn.OPERATE( AbSyn.BMINUS, _1, _3 )
                   )
# 38 "Parser.fsp"
                 : AbSyn.EXP));
# 244 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.EXP in
            let _3 = parseState.GetInput(3) :?> AbSyn.EXP in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsp"
                                          AbSyn.OPERATE( AbSyn.BTIMES, _1, _3 )
                   )
# 39 "Parser.fsp"
                 : AbSyn.EXP));
# 256 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> AbSyn.EXP in
            let _6 = parseState.GetInput(6) :?> AbSyn.EXP in
            let _8 = parseState.GetInput(8) :?> AbSyn.EXP in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsp"
                                                          AbSyn.OVER (AbSyn.RSUM, _2, _4, _6, _8) 
                   )
# 40 "Parser.fsp"
                 : AbSyn.EXP));
# 270 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> AbSyn.EXP in
            let _6 = parseState.GetInput(6) :?> AbSyn.EXP in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsp"
                                                   AbSyn.LET_IN (_2, _4, _6)
                   )
# 41 "Parser.fsp"
                 : AbSyn.EXP));
# 283 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> AbSyn.EXP in
            let _6 = parseState.GetInput(6) :?> AbSyn.EXP in
            let _8 = parseState.GetInput(8) :?> AbSyn.EXP in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsp"
                                                           AbSyn.OVER (AbSyn.RPROD, _2, _4, _6, _8) 
                   )
# 42 "Parser.fsp"
                 : AbSyn.EXP));
|]
# 298 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 19;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Prog lexer lexbuf : AbSyn.EXP =
    engine lexer lexbuf 0 :?> _
